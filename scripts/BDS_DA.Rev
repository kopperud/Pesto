################################################################################
#
# RevBayes Example: Bayesian inference of diversification rates under a
#                   branch-specific birth-death model
#
#
# authors: Sebastian Hoehna
#
################################################################################


#######################
# Reading in the Data #
#######################

# Read in the observed phylogeny
observed_phylogeny = readTrees("data/bears.tre")[1]
taxa <- observed_phylogeny.taxa()

# initialize the moves and monitors vectors
moves    = VectorMoves()
monitors = VectorMonitors()




####################
# Create the rates #
####################


speciation <- [2.0, 1.0]
extinction <- [0.5, 0.1]
eta <- 0.1

NUM_RATE_CATEGORIES <- 2

### Create a uniformly distributed variable for the category at the root
root_category ~ dnUniformNatural(1,NUM_RATE_CATEGORIES)
moves.append( mvRandomIntegerWalk(root_category,weight=10) )


#### construct a variable for the tree drawn from a birth death process
timetree ~ dnHBDP( lambda=speciation,
                   mu=extinction,
                   rootAge=observed_phylogeny.rootAge(),
                   rho=1.0,
                   rootState=root_category,
                   delta=eta,
                   taxa=taxa,
                   condition="survival",
                   allowSameCategory=FALSE )

### clamp the model with the "observed" tree
timetree.clamp(observed_phylogeny)

### Create moves that change the augmented rate-shift events on the tree
moves.append( mvBirthDeathEvent(timetree,weight=20) )
moves.append( mvDiscreteEventCategoryRandomWalk(timetree,weight=10) )
moves.append( mvEventTimeBeta(timetree, delta=0.01, offset=1.0, weight=10,tune=TRUE) )
moves.append( mvEventTimeSlide(timetree, delta=timetree.treeLength()/10.0, weight=10,tune=false) )
moves.append( mvEventTimeSlide(timetree, delta=timetree.treeLength()/50.0, weight=10,tune=false) )
moves.append( mvEventTimeSlide(timetree, delta=timetree.treeLength()/100.0, weight=10,tune=false) )

### Create some deterministic variable that hold information about the rates per branch
num_events := timetree.numberEvents()
avg_lambda := timetree.averageSpeciationRate()
avg_mu     := timetree.averageExtinctionRate()
avg_net    := avg_lambda - avg_mu
avg_rel    := avg_mu / avg_lambda

total_num_events := sum( num_events )

#############
# The Model #
#############

### workspace model wrapper ###
mymodel = model(speciation)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/BDS_DA.log",printgen=1, separator = TAB) )
monitors.append( mnScreen(printgen=1000) )


################
# The Analysis #
################

### workspace model wrapper ###
mymodel = model(timetree)

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")

### run the MCMC
mymcmc.run(generations=200000)



q()
